{"version":3,"sources":["core/sockets.js","actions/sockets.js","components/socket.js"],"names":["dmx","__sockets","Socket","namespace","options","config","parent","extend","transports","socket","domain","scriptElm","document","querySelector","getAttribute","replace","io","on","opts","Object","keys","forEach","eventName","data","cb","Flow","run","DataScope","$param","then","Actions","this","parse","emit","params","Promise","resolve","Component","initialData","id","connected","disconnected","attributes","type","String","default","methods","connect","request","events","Event","disconnect","connect_error","message","dispatchEvent","trigger","set","render","node","textContent","cfg","window","Hjson","JSON","e","console","error","debug","onConnect","bind","onDisconnect","onConnectError","onMessage","props","onAny","destroyed","off","offAny"],"mappings":"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","file":"../dmxSockets/dmxSockets.js","sourcesContent":["dmx.__sockets = {};\r\n\r\ndmx.Socket = function(namespace, options, config, parent) {\r\n    namespace = namespace || '/';\r\n    options = dmx.extend(true, {\r\n        transports: ['websocket'] // default to websocket transport only\r\n    }, options);\r\n\r\n    var socket = dmx.__sockets[namespace];\r\n\r\n    if (!socket) {\r\n        var domain = '';\r\n        var scriptElm = document.querySelector('[src$=\"socket.io/socket.io.js\"]');\r\n\r\n        if (scriptElm) {\r\n            var src = scriptElm.getAttribute('src');\r\n            domain = src.replace(/\\/?socket\\.io\\/socket\\.io\\.js$/, '');\r\n        }\r\n\r\n        socket = io(domain + namespace, options);\r\n\r\n        if (options.transports[0] == 'websocket') {\r\n            // on reconnection, reset the transports option, as the Websocket\r\n            // connection may have failed (caused by proxy, firewall, browser, ...)\r\n            socket.on('reconnect_attempt', function() {\r\n                socket.io.opts.transports = ['polling', 'websocket'];\r\n            });\r\n        }\r\n        dmx.__sockets[namespace] = socket;\r\n    }\r\n\r\n    if (config) {\r\n        Object.keys(config).forEach(function(eventName) {\r\n            socket.on(eventName, function(data, cb) {\r\n                dmx.Flow.run(config[eventName], new dmx.DataScope({$param: data}, parent)).then(function(data) {\r\n                    if (typeof cb == 'function') cb(data);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    return socket;\r\n}","dmx.Actions({\r\n\r\n    'sockets.emit': function(options) {\r\n        options = this.parse(options);\r\n        dmx.Socket(options.namespace || '/').emit(options.eventName, options.params);\r\n    },\r\n\r\n    'sockets.request': function(options) {\r\n        options = this.parse(options);\r\n        return new Promise(function(resolve) {\r\n            dmx.Socket(options.namespace || '/').emit(options.eventName, options.params, resolve);\r\n        });\r\n    }\r\n\r\n});","dmx.Component('socket', {\r\n\r\n    initialData: {\r\n        id: null,\r\n        connected: false,\r\n        disconnected: true\r\n    },\r\n\r\n    attributes: {\r\n        namespace: {\r\n            type: String,\r\n            default: '/'\r\n        },\r\n\r\n        options: {\r\n            type: Object,\r\n            default: {}\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        emit: function(eventName, data) {\r\n            this.socket.emit(eventName, data);\r\n        },\r\n\r\n        connect: function() {\r\n            this.socket.connect();\r\n        },\r\n\r\n        request: function(eventName, data) {\r\n            var socket = this.socket;\r\n\r\n            return new Promise(function(resolve) {\r\n                socket.emit(eventName, data, resolve);\r\n            });\r\n        }\r\n    },\r\n\r\n    events: {\r\n        connect: Event,\r\n        disconnect: Event,\r\n        connect_error: Event,\r\n        message: Event\r\n    },\r\n\r\n    message: function(eventName, data) {\r\n        this.dispatchEvent('message', {}, data, eventName);\r\n    },\r\n\r\n    trigger: function(eventName) {\r\n        this.set('id', this.socket.id);\r\n        this.set('connected', this.socket.connected);\r\n        this.set('disconnected', this.socket.disconnected);\r\n        this.dispatchEvent(eventName);\r\n    },\r\n\r\n    render: function(node) {\r\n        if (node.textContent) {\r\n            // for usage like a flow, a script tag with config as content\r\n            try {\r\n                this.cfg = (window.Hjson ? Hjson : JSON).parse(node.textContent);\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (dmx.debug) {\r\n                    console.debug(node.textContent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onConnect = this.trigger.bind(this, 'connect');\r\n        this.onDisconnect = this.trigger.bind(this, 'disconnect');\r\n        this.onConnectError = this.trigger.bind(this, 'connect_error');\r\n        this.onMessage = this.message.bind(this);\r\n        \r\n        this.socket = dmx.Socket(this.props.namespace, this.props.options, this.cfg, this);\r\n        this.socket.on('connect', this.onConnect);\r\n        this.socket.on('disconnect', this.onDisconnect);\r\n        this.socket.on('connect_error', this.onConnectError);\r\n        this.socket.onAny(this.onMessage);\r\n    },\r\n\r\n    destroyed: function() {\r\n        this.socket.off('connect', this.onConnect);\r\n        this.socket.off('disconnect', this.onDisconnect);\r\n        this.socket.off('connect_error', this.onConnectError);\r\n        this.socket.offAny(this.onMessage);\r\n    }\r\n\r\n});"]}