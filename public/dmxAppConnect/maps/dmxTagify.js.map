{"version":3,"sources":["components/tagify.js"],"names":["dmx","Component","extends","initialData","items","values","attributes","settings","type","Object","default","data","Array","String","nocustom","Boolean","readonly","delimiters","duplicates","noinput","Number","Infinity","loading","mode","notrim","noautocomplete","enum","pattern","methods","addEmptyTag","this","tagify","addTags","tags","clear","skipInvalids","onchange","removeTags","removeAllTags","events","change","Event","add","remove","invalid","input","focus","blur","noresults","event","getCleanValue","set","map","tag","__item","value","getWhitelist","isArray","props","item","scope","DataScope","tagData","__dmx","parse","label","style","secondary","image","class","count","templates","wrapper","_s","classNames","namespace","className","disabled","required","hasAttribute","getAttribute","userInput","placeholder","title","a11y","focusableTags","tagX","tagText","tagTextProp","dropdownItem","getComputedStyle","DOM","originalInput","gap","getPropertyValue","img_size","text_color","sec_color","sec_size","count_color","render","node","prototype","call","self","$node","form","name","addEventListener","formData","delete","_name","test","forEach","append","Tagify","extend","enforceWhitelist","whitelist","blacklist","maxTags","trim","keepInvalidTags","skipInvalid","startsWith","RegExp","replace","autoComplete","enabled","rightKey","dropdown","searchKeys","caseSensitive","maxItems","fuzzySearch","accentedSearch","position","highlightFirst","closeOnSelect","originalInputValueFormat","join","transformTag","found","find","assign","setDisabled","setReadonly","on","bind","dispatchEvent","detail","isCustom","message","isValid","update","equal","defaultValue","setValue","loadOriginalValues","array","getTagElms","replaceTag","updateData","destroy"],"mappings":"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","file":"../dmxTagify/dmxTagify.js","sourcesContent":["dmx.Component('tagify', {\r\n\r\n    extends: 'form-element',\r\n\r\n    initialData: {\r\n        items: [],\r\n        values: []\r\n    },\r\n\r\n    attributes: {\r\n        settings: {\r\n            type: Object,\r\n            default: {}\r\n        },\r\n\r\n        data: {\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n        'tag-value': {\r\n            type: String,\r\n            default: '$value'\r\n        },\r\n\r\n        'tag-text': {\r\n            type: String,\r\n            default: '$value'\r\n        },\r\n\r\n        'tag-secondary': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'tag-image': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'tag-class': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'tag-count': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'tag-readonly': {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        nocustom: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        readonly: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        delimiters: {\r\n            type: String,\r\n            default: ','\r\n        },\r\n\r\n        duplicates: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        noinput: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'max-tags': {\r\n            type: Number,\r\n            default: Infinity\r\n        },\r\n\r\n        loading: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        mode: {\r\n            type: String,\r\n            default: null // select/mix\r\n        },\r\n\r\n        notrim: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        noautocomplete: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'keep-invalid': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'skip-invalid': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'min-chars': {\r\n            type: Number,\r\n            default: 2\r\n        },\r\n\r\n        'case-sensitive': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'max-items': {\r\n            type: Number,\r\n            default: 10\r\n        },\r\n\r\n        'no-fuzzy-search': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'no-accented-search': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'dropdown-position': {\r\n            type: String,\r\n            default: 'all',\r\n            enum: ['all', 'text', 'input']\r\n        },\r\n\r\n        'highlight-first': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'no-close-on-select': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        pattern: {\r\n            type: String,\r\n            default: null\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        addEmptyTag: function() {\r\n            this.tagify.addEmptyTag();\r\n        },\r\n\r\n        addTags: function(tags, clear, skipInvalids) {\r\n            this.tagify.addTags(tags, clear, skipInvalids);\r\n            this.onchange();\r\n        },\r\n\r\n        removeTags: function(tags) {\r\n            this.tagify.removeTags(tags);\r\n            this.onchange();\r\n        },\r\n\r\n        removeAllTags: function() {\r\n            this.tagify.removeAllTags();\r\n            this.onchange();\r\n        },\r\n    },\r\n\r\n    events: {\r\n        change: Event,\r\n        add: Event,\r\n        remove: Event,\r\n        invalid: Event,\r\n        input: Event,\r\n        focus: Event,\r\n        blur: Event,\r\n        noresults: Event,\r\n    },\r\n\r\n    onchange: function(event) {\r\n        var tags = this.tagify.getCleanValue();\r\n        \r\n        this.set('items', tags.map(function(tag) {\r\n            return tag.__item;\r\n        }))\r\n\r\n        this.set('values', tags.map(function(tag) {\r\n            return tag.value;\r\n        }));\r\n    },\r\n\r\n    getWhitelist: function() {\r\n        if (!Array.isArray(this.props.data)) return [];\r\n\r\n        return this.props.data.map(function(item) {\r\n            var scope = dmx.DataScope(item, this);\r\n            var tagData = {\r\n                __dmx: true,\r\n                __item: item,\r\n                value: dmx.parse(this.props['tag-value'], scope),\r\n                label: dmx.parse(this.props['tag-text'], scope)\r\n            };\r\n\r\n            if (item.style) {\r\n                tagData.style = item.style;\r\n            }\r\n\r\n            if (this.props['tag-secondary']) {\r\n                tagData.secondary = dmx.parse(this.props['tag-secondary'], scope);\r\n            }\r\n\r\n            if (this.props['tag-image']) {\r\n                tagData.image = dmx.parse(this.props['tag-image'], scope);\r\n            }\r\n\r\n            if (this.props['tag-class']) {\r\n                tagData.class = dmx.parse(this.props['tag-class'], scope);\r\n            }\r\n\r\n            if (this.props['tag-count']) {\r\n                tagData.count = dmx.parse(this.props['tag-count'], scope);\r\n            }\r\n\r\n            if (this.props['tag-readonly']) {\r\n                tagData.readonly = !!dmx.parse(this.props['tag-readonly'], scope);\r\n            }\r\n\r\n            return tagData;\r\n        }, this);\r\n    },\r\n\r\n    templates: {\r\n        wrapper: function(input, _s) {\r\n            return '<tags class=\"' + _s.classNames.namespace + ' ' +\r\n                (_s.mode ? _s.classNames[_s.mode + 'Mode'] : '') + ' ' +\r\n                input.className + '\"' +\r\n                (_s.readonly ? ' readonly' : '') +\r\n                (_s.disabled ? ' disabled' : '') +\r\n                (_s.required ? ' required' : '') +\r\n                (input.hasAttribute('dmxDomId') ? ' dmxDomId=\"' + input.getAttribute('dmxDomId') + '\"' : '') +\r\n                (input.hasAttribute('style') ? ' style=\"' + input.getAttribute('style') + '\"' : '') +\r\n                ' tabIndex=\"-1\">' +\r\n                '<span' + (!_s.readonly && _s.userInput ? ' contenteditable' : '') +\r\n                ' tabIndex=\"0\" data-placeholder=\"' + (_s.placeholder || '&#8203;') + '\"' +\r\n                ' aria-placeholder=\"' + (_s.placeholder || '') + '\"' +\r\n                ' class=\"' + _s.classNames.input + '\"' +\r\n                ' role=\"textbox\"' +\r\n                ' aria-autocomplete=\"both\"' +\r\n                ' aria-multiline=\"' + (_s.mode == 'mix' ? true : false) + '\"></span>' +\r\n                '&#8203;</tags>';\r\n        },\r\n\r\n        tag: function(tagData) {\r\n            var _s = this.settings;\r\n\r\n            return '<tag ' +\r\n                //this.getAttributes(tagData) +\r\n                (tagData.readonly ? ' readonly' : '') +\r\n                ' title=\"' + (tagData.title || tagData.value) + '\"' +\r\n                ' contenteditable=\"false\"' +\r\n                ' spellcheck=\"false\"' +\r\n                ' tabindex=\"' + (_s.a11y.focusableTags ? 0 : -1) + '\"' +\r\n                ' class=\"' + _s.classNames.tag + ' ' + (tagData.class || '') + '\"' +\r\n                ' style=\"white-space:nowrap;' + (tagData.style || '') + '\"' +\r\n                '>' +\r\n                '<x' +\r\n                ' title=\"\"' +\r\n                ' class=\"' + _s.classNames.tagX + '\"' +\r\n                ' role=\"button\"' +\r\n                ' aria-label=\"remove tag\"' +\r\n                '></x>' +\r\n                '<div' +\r\n                (_s.mode != 'select' ? ' style=\"display:flex;align-items:center;\"' : '') +\r\n                '>' +\r\n                (tagData.image ?\r\n                '<img' +\r\n                ' onerror=\"this.style.visibility=\\'hidden\\'\"' +\r\n                ' src=\"' + tagData.image + '\"' +\r\n                ' style=\"height:var(--tag-img-size, 1em);margin-right:.3em;pointer-events:none;\"' +\r\n                '>' :\r\n                '') +\r\n                '<span' +\r\n                ' class=\"' + _s.classNames.tagText + '\"' +\r\n                '>' + (tagData[_s.tagTextProp] || tagData.value) + '</span>' +\r\n                '</div>' +\r\n                '</tag>';\r\n        },\r\n\r\n        dropdownItem: function(item) {\r\n            var style = getComputedStyle(this.DOM.originalInput);\r\n            \r\n            var gap = style.getPropertyValue('--item-gap') || '.3em';\r\n            var img_size = style.getPropertyValue('--item-img-size') || '1em';\r\n            var text_color = style.getPropertyValue('--item-text-color') || 'inherit';\r\n            var sec_color = style.getPropertyValue('--item-sec-color') || 'inherit';\r\n            var sec_size = style.getPropertyValue('--item-sec-size') || '.75em';\r\n            var count_color = style.getPropertyValue('--item-count-color') || 'inherit';\r\n\r\n            return '<div ' +\r\n                //this.getAttributes(item) +\r\n                ' class=\"' + this.settings.classNames.dropdownItem +\r\n                (item.class ? ' ' + item.class : '') + '\"' +\r\n                ' style=\"display: flex; align-items: center; gap: var(--item-gap, ' + gap + ')\"' +\r\n                ' tabindex=\"0\" role=\"option\">' +\r\n                (item.image ?\r\n                '<img' +\r\n                ' onerror=\"this.style.visibility=\\'hidden\\'\"' +\r\n                ' src=\"' + item.image + '\"' +\r\n                ' style=\"height:var(--item-img-size, ' + img_size + ');pointer-events:none;\"' +\r\n                '>' :\r\n                '') +\r\n                '<div style=\"color: var(--item-text-color, ' + text_color + ')\">' + (item.label || item.value) +\r\n                (item.secondary ? '<br><span style=\"color: var(--item-sec-color, ' + sec_color + '); font-size: ' + sec_size + '\">' + item.secondary + '</span>' : '') +\r\n                '</div>' +\r\n                (item.count ? ' <div style=\"color:var(--item-count-color, ' + count_color+ ')\"> (' + item.count + ')</div>' : '') +\r\n                '</div>';\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        dmx.Component('form-element').prototype.render.call(this, node);\r\n\r\n        var self = this;\r\n\r\n        if (this.$node.form && this.$node.name) {\r\n            var name = this.$node.name;\r\n\r\n            this.$node.form.addEventListener('formdata', function(event) {\r\n                var formData = event.formData;\r\n                \r\n                if (self.props.mode != 'select' && self.props.mode != 'mix') {\r\n                    formData.delete(name);\r\n\r\n                    if (Array.isArray(self.data.values)) {\r\n                        var _name = name;\r\n                        if (!/\\[\\]$/.test(_name)) _name += '[]';\r\n\r\n                        self.data.values.forEach(function(value) {\r\n                            formData.append(_name, value);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.$node.form.addEventListener('reset', function(event) {\r\n                if (self.tagify) {\r\n                    self.tagify.removeAllTags();\r\n                    self.onchange();\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.tagify = new Tagify(this.$node, dmx.extend({\r\n            enforceWhitelist: this.props.nocustom,\r\n            whitelist: this.getWhitelist(),\r\n            blacklist: this.props.blacklist,\r\n            tagTextProp: 'label',\r\n            delimiters: this.props.delimiters,\r\n            duplicates: this.props.duplicates,\r\n            userInput: !this.props.noinput,\r\n            maxTags: this.props['max-tags'],\r\n            mode: this.props.mode,\r\n            trim: !this.props.notrim,\r\n            keepInvalidTags: this.props['keep-invalid'],\r\n            skipInvalid: this.props['skip-invalid'],\r\n            pattern: this.props.pattern && this.props.pattern.startsWith('/') ? new RegExp(this.props.pattern.replace(/^\\/|\\/$/, '')) : this.props.pattern,\r\n            autoComplete: {\r\n                enabled: !this.props.noautocomplete,\r\n                rightKey: !this.props.noautocomplete\r\n            },\r\n            dropdown: {\r\n                enabled: this.props['min-chars'] >= 0 ? this.props['min-chars'] : false,\r\n                searchKeys: ['label'],\r\n                caseSensitive: this.props['case-sensitive'],\r\n                maxItems: this.props['max-items'],\r\n                fuzzySearch: !this.props['no-fuzzy-search'],\r\n                accentedSearch: !this.props['no-accented-search'],\r\n                position: this.props['dropdown-position'],\r\n                highlightFirst: this.props['highlight-first'],\r\n                closeOnSelect: !this.props['no-close-on-select']\r\n            },\r\n            originalInputValueFormat: function(tags) {\r\n                return tags.map(function(tag) {\r\n                    return tag.value;\r\n                }).join(self.props.delimiters[0]);\r\n            },\r\n            transformTag: function(tag) {\r\n                delete tag.class;\r\n                delete tag.count;\r\n                delete tag.image;\r\n                delete tag.__dmx;\r\n                delete tag.__item;\r\n\r\n                var found = self.getWhitelist().find(function(data) {\r\n                    return data.value == tag.value || data.label == tag.value;\r\n                });\r\n\r\n                if (found) {\r\n                    Object.assign(tag, found);\r\n                }\r\n            },\r\n            templates: this.templates\r\n        }, this.props.settings));\r\n\r\n        if (this.props.nocustom && this.props.data == null) {\r\n            this.tagify.loading(true);\r\n            this.tagify.setDisabled(true);\r\n        } else {\r\n            this.tagify.loading(this.props.loading);\r\n        }\r\n\r\n        this.tagify.setReadonly(this.props.readonly);\r\n\r\n        this.tagify.on('change', this.onchange.bind(this));\r\n        this.tagify.on('change', this.dispatchEvent.bind(this, 'change'));\r\n        \r\n        this.tagify.on('add', function(event) {\r\n            self.dispatchEvent('add', null, {\r\n                item: event.detail.data.__item,\r\n                value: event.detail.data.value,\r\n                isCustom: !event.detail.data.__item\r\n            });\r\n        });\r\n        \r\n        this.tagify.on('remove', function(event) {\r\n            self.dispatchEvent('remove', null, {\r\n                item: event.detail.data.__item,\r\n                value: event.detail.data.value,\r\n                isCustom: !event.detail.data.__item\r\n            });\r\n        });\r\n        \r\n        this.tagify.on('invalid', function(event) {\r\n            self.dispatchEvent('invalid', null, {\r\n                value: event.detail.data.value,\r\n                message: event.detail.message\r\n            });\r\n        });\r\n        \r\n        this.tagify.on('input', function(event) {\r\n            self.dispatchEvent('input', null, {\r\n                value: event.detail.value,\r\n                isValid: event.detail.isValid\r\n            });\r\n        });\r\n        \r\n        this.tagify.on('focus', this.dispatchEvent.bind(this, 'focus'));\r\n        \r\n        this.tagify.on('blur', this.dispatchEvent.bind(this, 'blur'));\r\n        \r\n        this.tagify.on('dropdown:noMatch', function(event) {\r\n            self.dispatchEvent('noresults', null, {\r\n                value: event.detail.value\r\n            });\r\n        });\r\n    },\r\n\r\n    update: function(props) {\r\n        if (props.disabled != this.props.disabled) {\r\n            this.tagify.setDisabled(this.props.disabled);\r\n        }\r\n\r\n        if (props.readonly != this.props.readonly) {\r\n            this.tagify.setReadonly(this.props.readonly);\r\n        }\r\n\r\n        if (!dmx.equal(props.data, this.props.data)) {\r\n            this.tagify.whitelist = this.getWhitelist();\r\n\r\n            if (this.props.nocustom) {\r\n                this.$node.defaultValue = this.props.value || '';\r\n                this.setValue(this.props.value);\r\n                this.tagify.loadOriginalValues(this.props.value);\r\n                this.onchange();\r\n                this.tagify.loading(this.props.loading);\r\n                this.tagify.setDisabled(this.props.disabled);\r\n            } else {\r\n                dmx.array(this.tagify.getTagElms()).forEach(function(tag) {\r\n                    var tagData = this.tagify.tagData(tag);\r\n                    \r\n                    if (!tagData.__dmx) {\r\n                        var found = this.getWhitelist().find(function(data) {\r\n                            return data.value == tagData.value || data.label == tagData.value;\r\n                        });\r\n    \r\n                        if (found) {\r\n                            Object.assign(tagData, found);\r\n                            this.tagify.replaceTag(tag, tagData);\r\n                        }\r\n                    }\r\n                }, this);\r\n                this.onchange();\r\n            }\r\n        }\r\n\r\n        if (!dmx.equal(props.value, this.props.value)) {\r\n            this.$node.defaultValue = this.props.value || '';\r\n            this.setValue(this.props.value);\r\n            this.tagify.loadOriginalValues(this.props.value);\r\n            this.onchange();\r\n        }\r\n\r\n        if (props.loading != this.props.loading) {\r\n            this.tagify.loading(this.props.loading);\r\n        }\r\n\r\n        this.updateData();\r\n    },\r\n\r\n    destroy: function() {\r\n        this.tagify.destroy();\r\n    }\r\n\r\n});"]}