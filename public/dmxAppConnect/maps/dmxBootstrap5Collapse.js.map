{"version":3,"sources":["components/collapse.js"],"names":["dmx","Component","initialData","collapsed","attributes","show","type","Boolean","default","methods","toggle","this","instance","hide","events","Event","shown","hidden","render","node","$node","$parse","classList","add","addEventListener","dispatchEvent","bind","onShown","onHidden","options","hasAttribute","parent","getAttribute","bootstrap","Collapse","update","set","props"],"mappings":";;;;;;AAAAA,IAAAC,UAAA,eAAA,CAEAC,YAAA,CACAC,WAAA,GAGAC,WAAA,CACAC,KAAA,CACAC,KAAAC,QACAC,SAAA,IAIAC,QAAA,CACAC,OAAA,WACAC,KAAAC,SAAAF,UAGAL,KAAA,WACAM,KAAAC,SAAAP,QAGAQ,KAAA,WACAF,KAAAC,SAAAC,SAIAC,OAAA,CACAT,KAAAU,MACAC,MAAAD,MACAF,KAAAE,MACAE,OAAAF,OAGAG,OAAA,SAAAC,GACAR,KAAAS,MAAAD,EACAR,KAAAU,SAEAV,KAAAS,MAAAE,UAAAC,IAAA,YAEAZ,KAAAS,MAAAI,iBAAA,mBAAAb,KAAAc,cAAAC,KAAAf,KAAA,SACAA,KAAAS,MAAAI,iBAAA,oBAAAb,KAAAc,cAAAC,KAAAf,KAAA,UACAA,KAAAS,MAAAI,iBAAA,mBAAAb,KAAAc,cAAAC,KAAAf,KAAA,SACAA,KAAAS,MAAAI,iBAAA,qBAAAb,KAAAc,cAAAC,KAAAf,KAAA,WAEAA,KAAAS,MAAAI,iBAAA,oBAAAb,KAAAgB,QAAAD,KAAAf,OACAA,KAAAS,MAAAI,iBAAA,qBAAAb,KAAAiB,SAAAF,KAAAf,OAEA,IAAAkB,EAAA,CAAAnB,QAAA,GAEAC,KAAAS,MAAAU,aAAA,oBACAD,EAAAE,OAAApB,KAAAS,MAAAY,aAAA,mBAGArB,KAAAC,SAAA,IAAAqB,UAAAC,SAAAvB,KAAAS,MAAAS,GAEAlB,KAAAwB,OAAA,KAGAR,QAAA,WACAhB,KAAAyB,IAAA,aAAA,IAGAR,SAAA,WACAjB,KAAAyB,IAAA,aAAA,IAGAD,OAAA,SAAAE,GACAA,EAAAhC,MAAAM,KAAA0B,MAAAhC,OACAM,KAAAC,SAAAD,KAAA0B,MAAAhC,KAAA,OAAA,UACAM,KAAAyB,IAAA,aAAAzB,KAAA0B,MAAAhC","file":"../dmxBootstrap5Collapse/dmxBootstrap5Collapse.js","sourcesContent":["dmx.Component('bs5-collapse', {\r\n\r\n    initialData: {\r\n        collapsed: true\r\n    },\r\n\r\n    attributes: {\r\n        show: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        toggle: function() {\r\n            this.instance.toggle();\r\n        },\r\n\r\n        show: function() {\r\n            this.instance.show();\r\n        },\r\n\r\n        hide: function() {\r\n            this.instance.hide();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        show: Event,\r\n        shown: Event,\r\n        hide: Event,\r\n        hidden: Event\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = node;\r\n        this.$parse();\r\n\r\n        this.$node.classList.add('collapse');\r\n\r\n        this.$node.addEventListener('show.bs.collapse', this.dispatchEvent.bind(this, 'show'));\r\n        this.$node.addEventListener('shown.bs.collapse', this.dispatchEvent.bind(this, 'shown'));\r\n        this.$node.addEventListener('hide.bs.collapse', this.dispatchEvent.bind(this, 'hide'));\r\n        this.$node.addEventListener('hidden.bs.collapse', this.dispatchEvent.bind(this, 'hidden'));\r\n\r\n        this.$node.addEventListener('shown.bs.collapse', this.onShown.bind(this));\r\n        this.$node.addEventListener('hidden.bs.collapse', this.onHidden.bind(this));\r\n\r\n        var options = { toggle: false };\r\n\r\n        if (this.$node.hasAttribute('data-bs-parent')) {\r\n            options.parent = this.$node.getAttribute('data-bs-parent');\r\n        }\r\n\r\n        this.instance = new bootstrap.Collapse(this.$node, options);\r\n\r\n        this.update({});\r\n    },\r\n\r\n    onShown: function() {\r\n        this.set('collapsed', false);\r\n    },\r\n\r\n    onHidden: function() {\r\n        this.set('collapsed', true);\r\n    },\r\n\r\n    update: function(props) {\r\n        if (props.show != this.props.show) {\r\n            this.instance[this.props.show ? 'show' : 'hide']();\r\n            this.set('collapsed', !this.props.show);\r\n        }\r\n    }\r\n\r\n});\r\n"]}